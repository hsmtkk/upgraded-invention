// Code generated by 'go generate'; DO NOT EDIT.

package wireguardnt

import (
	"syscall"
	"unsafe"

	"golang.org/x/sys/windows"
)

var _ unsafe.Pointer

// Do the interface allocations only once for common
// Errno values.
const (
	errnoERROR_IO_PENDING = 997
)

var (
	errERROR_IO_PENDING error = syscall.Errno(errnoERROR_IO_PENDING)
	errERROR_EINVAL     error = syscall.EINVAL
)

// errnoErr returns common boxed Errno values, to prevent
// allocations at runtime.
func errnoErr(e syscall.Errno) error {
	switch e {
	case 0:
		return errERROR_EINVAL
	case errnoERROR_IO_PENDING:
		return errERROR_IO_PENDING
	}
	// TODO: add more here, after collecting data on the common
	// error values see on Windows. (perhaps when running
	// all.bat?)
	return e
}

var (
	modwireguard = windows.NewLazySystemDLL("wireguard.dll")

	procDeleteAdapter          = modwireguard.NewProc("DeleteAdapter")
	procWireGuardCreateAdapter = modwireguard.NewProc("WireGuardCreateAdapter")
	procWireGuardOpenAdapter   = modwireguard.NewProc("WireGuardOpenAdapter")
)

func DeleteAdapter(handle *WireGuardAdapter) (err error) {
	r1, _, e1 := syscall.Syscall(procDeleteAdapter.Addr(), 1, uintptr(unsafe.Pointer(handle)), 0, 0)
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func CreateAdapter(pool string, name string) (err error) {
	var _p0 *uint16
	_p0, err = syscall.UTF16PtrFromString(pool)
	if err != nil {
		return
	}
	var _p1 *uint16
	_p1, err = syscall.UTF16PtrFromString(name)
	if err != nil {
		return
	}
	return _CreateAdapter(_p0, _p1)
}

func _CreateAdapter(pool *uint16, name *uint16) (err error) {
	r1, _, e1 := syscall.Syscall(procWireGuardCreateAdapter.Addr(), 2, uintptr(unsafe.Pointer(pool)), uintptr(unsafe.Pointer(name)), 0)
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func OpenAdapter(pool string, name string) (handle *WireGuardAdapter, err error) {
	var _p0 *uint16
	_p0, err = syscall.UTF16PtrFromString(pool)
	if err != nil {
		return
	}
	var _p1 *uint16
	_p1, err = syscall.UTF16PtrFromString(name)
	if err != nil {
		return
	}
	return _OpenAdapter(_p0, _p1)
}

func _OpenAdapter(pool *uint16, name *uint16) (handle *WireGuardAdapter, err error) {
	r0, _, e1 := syscall.Syscall(procWireGuardOpenAdapter.Addr(), 2, uintptr(unsafe.Pointer(pool)), uintptr(unsafe.Pointer(name)), 0)
	handle = (*WireGuardAdapter)(unsafe.Pointer(r0))
	if handle == 0 {
		err = errnoErr(e1)
	}
	return
}
